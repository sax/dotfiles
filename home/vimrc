" Modified from http://amix.dk/blog/post/19691#The-ultimate-Vim-configuration-on-Github
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" use terminal colors (needs to run before anything else)
set termguicolors

set nocompatible              " be iMproved, required

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim-Plug package manager

" auto install
if has('nvim') && empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
   silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

if !has('nvim') && empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.local/share/vim/plugged')
Plug 'junegunn/vim-plug' " registers plugin for help text, not needed for install
Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'chriskempson/base16-vim'
Plug 'sjl/vitality.vim'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'mbbill/undotree'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
Plug 'junegunn/fzf.vim'
Plug 'sheerun/vim-polyglot', { 'commit': '2c5af8f' }

" testing
Plug 'tpope/vim-projectionist'
Plug 'c-brenn/fuzzy-projectionist.vim'
Plug 'andyl/vim-projectionist-elixir'
Plug 'vim-test/vim-test'
Plug 'esamattis/slimux'
call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" show line numbers
set number
set nornu

" Sets how many lines of history VIM has to remember
set history=700

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread
au FocusGained * checktime

" Save on focus lost
au FocusLost * silent! :wa
" Write all buffers before navigating from Vim to tmux pane (using vim-tmux-navigator)
let g:tmux_navigator_save_on_switch = 2

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

set tags=tags,.tags,client/.tags

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" set cursorcolumn

" Turn on the WiLd menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc

"Always show current position
set ruler

" Height of the command bar
set cmdheight=2

set signcolumn=yes

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch

" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" window split defaults
set splitbelow
set splitright

set cursorline

hi clear SpellBad
hi SpellBad cterm=underline gui=underline

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=2
set tabstop=2

au FileType javascript setl sw=2 sts=2 et
au FileType css setl sw=2 sts=2 et
au FileType elixir setl sw=2 sts=2 et

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nnoremap <silent> <C-p> :GFiles<CR>

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
" Remember info about open buffers on close
set viminfo^=%


""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" Format the status line
let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head',
      \ },
      \ }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map 0 ^



set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " Linux/MacOSX
set runtimepath^=~/.vim/bundle/ctrlp.vim

vnoremap * y/<C-R>"<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

" show yank list (via FZF)
map <leader>p :Registers<cr>
inoremap <silent> <C-r>  <Esc>:Registers<cr>

function! GetRegisters()
    redir => cout
    silent registers
    redir END
    return split(cout, "\n")[1:]
endfunction
function! UseRegister(line)
    let var_a = getreg(a:line[1], 1, 1)
    " let var_amode = getregtype(a:line[1])
    " call setreg('"', var_a, var_amode)
    exe 'normal! o'.var_a[0]
endfunction
command! Registers call fzf#run(fzf#wrap({
            \ 'source': GetRegisters(),
            \ 'sink': function('UseRegister')}))

function! FzfSpellSink(word)
    exe 'normal! "_ciw'.a:word
endfunction
function! FzfSpell()
    let suggestions = spellsuggest(expand("<cword>"))
    return fzf#run({'source': suggestions, 'sink': function("FzfSpellSink"), 'down': 10 })
endfunction
nnoremap z= :call FzfSpell()<CR>

nmap <leader>f :Lines<cr>

autocmd BufReadPost fugitive://* set bufhidden=delete

autocmd BufNewFile,BufReadPost *.md set filetype=markdown

fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    keepjumps %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()


" formatting - text width 85, auto formatting, but only in comments
set tw=85
set fo=jancqrw
autocmd BufNewFile,BufRead markdown setlocal fo+=t

set cursorcolumn

" change cursor on insert mode (works in OSX iTerm)
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" copying to the system clipboard (needs vim 7.4+)
" set unamed to copy stright into the system register
" leave empty to require "* to go into system register
set clipboard=


set mouse=a


" vimux 'slime'
function! VimuxSlime()
    call VimuxSendText(@v)
    call VimuxSendKeys("Enter")
endfunction

 " If text is selected, save it in the v buffer and send that buffer it to tmux
 vmap <C-c><C-c> "vy :call VimuxSlime()<CR>
 " Select current paragraph and send it to tmux
 nmap <C-c><C-c> vip<C-c><C-c>

nmap <C-c><C-l> :wa <bar> VimuxRunLastCommand<CR>

autocmd BufReadPost *.org setlocal textwidth=500
autocmd BufReadPost *.org hi Folded guibg=NONE
let g:org_heading_shade_leading_stars = 0
  let g:org_heading_highlight_colors = ['Title', 'Constant', 'Identifier',
    \   'Type', 'Special']
    " \   'Statement', 'PreProc', 'Type', 'Special']

let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Linting / Completion / Snippets / LSP
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

if len(nvim_list_uis()) > 0
  :source ~/.vim/colors.vim
  :source ~/.vim/keybindings.vim
  :source ~/.vim/vim-test.vim
endif
