#!/usr/bin/env bash

source "./bin/_support/cecho.sh"
source "./bin/_support/check.sh"
source "./bin/_support/step.sh"

symlinks_exist() {
  declare source=$1 destination=$2 prefix=$3

  missing=0
  for f in $source/*; do
    file=$(basename $f)
    symlink="$destination/$prefix$file"
    if ! test -h "$symlink" ; then
      missing=1
    fi
  done

  return $missing
}

check "Homebrew : installed" \
  "brew commands" \
  "/bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\""

check "Homebrew : bundle" \
  "brew bundle check" \
  "brew bundle"

check "Install gitconfig" \
  "git config --global -l | grep include.path | grep dotfiles &>/dev/null" \
  "git config --global --add include.path ~/.dotfiles/git/gitconfig"

check "ohmyzsh : install" \
  "test -d ~/.oh-my-zsh" \
  "sh -c \"\$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\""

check "ohmyzsh : custom aliases" \
  "test -e ~/.oh-my-zsh/custom/aliases.zsh" \
  "ln -s ~/.dotfiles/ohmyzsh/aliases.zsh ~/.oh-my-zsh/custom/aliases.zsh"

check "ohmyzsh : reload" \
  "test -e ~/.oh-my-zsh/custom/reload.zsh" \
  "ln -s ~/.dotfiles/ohmyzsh/reload.zsh ~/.oh-my-zsh/custom/reload.zsh"

check "ohmyzsh : iex" \
  "test -e ~/.oh-my-zsh/custom/iex.zsh" \
  "ln -s ~/.dotfiles/ohmyzsh/iex.zsh ~/.oh-my-zsh/custom/iex.zsh"

check "ohmyzsh : gcloud" \
  "test -e ~/.oh-my-zsh/custom/gcloud.zsh" \
  "ln -s ~/.dotfiles/ohmyzsh/gcloud.zsh ~/.oh-my-zsh/custom/gcloud.zsh"

check "Install ohmyzsh custom plugins" \
  "\$(symlinks_exist ~/.dotfiles/ohmyzsh/plugins ~/.oh-my-zsh/custom/plugins '')" \
  "for f in ~/.dotfiles/ohmyzsh/plugins/*; do ln -s \$f ~/.oh-my-zsh/custom/plugins/\$(basename \$f); done"

check "Activate clock" \
  "grep clock ~/.zshrc" \
  "sed -i'' -e 's/plugins=(/plugins=(clock /' ~/.zshrc"

# check "Activate git-duet" \
#   "grep git-duet ~/.zshrc" \
#   "sed -i'' -e 's/plugins=(/plugins=(git-duet /' ~/.zshrc"

check "Activate autojump" \
  "grep autojump ~/.zshrc" \
  "sed -i'' -e 's/plugins=(/plugins=(autojump /' ~/.zshrc"

check "Install home symlinks" \
  "\$(symlinks_exist ~/.dotfiles/home ~ '.')" \
  "for f in ~/.dotfiles/home/*; do ln -s \$f ~/.\$(basename \$f); done"

check "Configure max file descriptors" \
  "test $(ulimit -n) -eq 524288" \
  "sudo cp \"${HOME}/.dotfiles/launchd/limit.maxfiles.plist\" /Library/LaunchDaemons/ \
    && sudo chown root:wheel /Library/LaunchDaemons/limit.maxfiles.plist \
    && sudo chmod 644 /Library/LaunchDaemons/limit.maxfiles.plist \
    && sudo launchctl load -w /Library/LaunchDaemons/limit.maxfiles.plist \
    && ulimit -n 524288"

check "Configure max processes" \
  "test $(ulimit -u) -eq 11136" \
  "sudo cp \"${HOME}/.dotfiles/launchd/limit.maxproc.plist\" /Library/LaunchDaemons/ \
    && sudo chown root:wheel /Library/LaunchDaemons/limit.maxproc.plist \
    && sudo chmod 644 /Library/LaunchDaemons/limit.maxproc.plist \
    && sudo launchctl load -w /Library/LaunchDaemons/limit.maxproc.plist \
    && ulimit -u 11136"

#activate_autojump() {
#  bash-it enable plugin autojump
#}
#
#activate_bash_it() {
#  export BASH_IT="${HOME}/.bash_it"
#  source "${BASH_IT}/bash_it.sh"
#}
#
#activate_nvm() {
#  bash-it enable plugin nvm
#}
#
#activate_pyenv() {
#  bash-it enable plugin pyenv
#  export PYENV_ROOT="${HOME}/.pyenv"
#  export PATH="${HOME}/.pyenv/bin:${PATH}"
#  [[ `which pyenv` ]] && eval "$(pyenv init -)"
#  pyenv virtualenv-init - &> /dev/null \
#    && eval "$(pyenv virtualenv-init -)"
#}
#
#configure_git() {
#  git config --global -l | grep include.path | grep dotfiles &>/dev/null \
#    && info "gitconfig already installed" \
#    && return
#
#  warn 'installing gitconfig'
#  git config --global --add include.path ~/.dotfiles/git/gitconfig
#}
#
#install_bash_it() {
#  test -d "${HOME}/.bash_it" \
#    && info 'bash-it installed' \
#    && return
#
#  warn 'installing bash-it'
#  git clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it
#  ~/.bash_it/install.sh
#}
#
#install_custom_bash_its() {
#  for file in $(ls "${HOME}/.dotfiles/bash_it"); do
#    ln -vfs "${HOME}/.dotfiles/bash_it/${file}" "${HOME}/.bash_it/custom"
#  done
#  bash-it enable plugin chruby
#}
#
#install_custom_vim() {
#  for file in $(ls "${HOME}/.dotfiles/vim"); do
#    ln -vfs "${HOME}/.dotfiles/vim/${file}" "${HOME}/.${file}"
#  done
#}
#
#install_home_dotfiles() {
#  for file in $(ls "${HOME}/.dotfiles/home"); do
#    ln -vfs "${HOME}/.dotfiles/home/${file}" "${HOME}/.${file}"
#  done
#}
#
#install_luan_vim() {
#  test -d "${HOME}/.vim" \
#    && info 'luan vim already installed' \
#    && return
#
#  warn 'installing luan vim'
#  git clone https://github.com/luan/vimfiles "${HOME}/.vim"
#  cd ~/.vim
#  ./install --non-interactive
#}
#
#install_node() {
#  nvm install stable
#  nvm alias default stable
#}
#
#install_pyenv() {
#  test -e "${HOME}/.pyenv" \
#    && info 'pyenv already installed' \
#    && pyenv update \
#    && return
#
#  warn 'installing pyenv'
#  curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash
#}
#
#install_pythons() {
#  pyenv versions | grep 2.7.14 &>/dev/null \
#    || pyenv install 2.7.14
#  pyenv versions | grep 3.6.3 &>/dev/null \
#    || pyenv install 3.6.3
#
#  pyenv versions | grep 2.7.14/envs/neovim2 &>/dev/null \
#    || pyenv virtualenv 2.7.14 neovim2
#  pyenv versions | grep 3.6.3/envs/neovim3 &>/dev/null \
#    || pyenv virtualenv 3.6.3 neovim3
#
#  pyenv activate neovim2 &>/dev/null
#  pip show neovim &>/dev/null \
#    || pip install neovim
#
#  pyenv activate neovim3 &>/dev/null
#  pip show neovim &>/dev/null \
#    || pip install neovim
#}
